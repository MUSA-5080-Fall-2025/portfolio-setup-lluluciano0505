# Basic inspection
glimpse(pa_counties)
# Check coordinate reference system
st_crs(pa_counties)
# Get just the geometry
county_shapes <- st_geometry(pa_counties)
# Get just the data (no geometry)
county_data <- st_drop_geometry(pa_counties)
# Simple plot
plot(pa_counties)
# Just the geometry
plot(st_geometry(pa_counties))
# With ggplot2
ggplot(pa_counties) +
geom_sf() +
theme_void()
##Spatial Subsetting
# Get counties that intersect with a specific region
allegheny <- pa_counties %>%
filter(COUNTY_NAM == "ALLEGHENY")
# Find counties that touch Allegheny
neighbors <- pa_counties %>%
st_filter(allegheny, .predicate = st_touches)
# Map them
ggplot(neighbors) +
geom_sf() +
theme_void()
# Counties within 50km of Allegheny centroid
allegheny_center <- st_centroid(allegheny)
nearby <- pa_counties %>%
st_filter(st_buffer(allegheny_center, dist = 50000))
# Map them
ggplot(nearby) +
geom_sf() +
theme_void()
# Find census tracts within Allegheny County
tracts_in_allegheny <- census_tracts %>%
st_filter(allegheny, .predicate = st_within)
# With ggplot2
ggplot(tracts_in_allegheny) +
geom_sf() +
theme_void()
# Find counties that core based statistical areas (any overlap)
ggplot(metro_areas) +
geom_sf() +
theme_void()
metro_tracts<- census_tracts %>%
st_filter(metro_areas, .predicate = st_intersects)
ggplot(metro_tracts) +
geom_sf() +
theme_void()
ggplot(rural_tracts) +
geom_sf() +
theme_void()
##spatial joins
# Get census tract data
pa_tracts <- tracts(state = "PA", county = "Allegheny", cb = TRUE)
# Join tract data to county boundaries
# Each tract gets county attributes
tracts_with_counties <- census_tracts %>%
st_join(pa_counties)
# Aggregate tracts up to counties
# Summarize tract data by county
county_summaries <- tracts_with_counties %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarize(
n_tracts = n(),
avg_area = mean(AREA_SQ_MI)
)
county_summaries
##Distances
# Distance between county centroids
county_centers <- st_centroid(pa_counties)
ggplot(county_centers)+
geom_sf()+
theme_void()
distance_matrix <- st_distance(county_centers)
head(distance_matrix)
distance_matrix <- st_distance(county_centers)
head(distance_matrix)
# Calculate county areas
pa_counties <- pa_counties %>%
mutate(
area_sqkm = as.numeric(st_area(.)) / 1000000  # Convert to sq km
)
# Population density (need to join census data)
pa_counties <- pa_counties %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(
pop_density = population / area_sqkm
)
county_summaries
##Distances
# Distance between county centroids
county_centers <- st_centroid(pa_counties)
ggplot(county_centers)+
geom_sf()+
theme_void()
distance_matrix <- st_distance(county_centers)
head(distance_matrix)
# Calculate county areas
pa_counties <- pa_counties %>%
mutate(
area_sqkm = as.numeric(st_area(.)) / 1000000  # Convert to sq km
)
# Population density (need to join census data)
pa_counties <- pa_counties %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(
pop_density = population / area_sqkm
)
library(sf)
library(tidyverse)
library(ggplot2)
library(tigris)
library(tidycensus)
census_api_key("b236a5b2547ce79c3e203c3e1366ed7fa7b3d463", install = FALSE)
Sys.getenv("CENSUS_API_KEY")
# Read a shapefile
pa_counties <- st_read("Pennsylvania_County_Boundaries.shp")
# Read GeoJSON
districts <- st_read("districts.geojson")
hospitals <- st_read("hospitals.geojson")
#make crs the same (will go over later!)
hospitals <- hospitals %>%
st_transform(st_crs(pa_counties))
# From a URL
#https://data-pennshare.opendata.arcgis.com/datasets/pennsylvania-state-boundary/explore
#click on "I want to use this (bottom)"
state_bounds <- st_read("https://gis.penndot.pa.gov/gis/rest/services/opendata/stateboundary/MapServer/0/query?outFields=*&where=1%3D1&f=geojson")
#get census tracts (boundaries only) using the tigris package
census_tracts <- tracts(state = "PA", cb = TRUE)
#make crs match I'll review this later!
census_tracts <- census_tracts %>%
st_transform(st_crs(pa_counties))
# Get urban areas (Census Bureau definition)
# These are areas with 2,500+ people
metro_areas <- core_based_statistical_areas(cb = TRUE)
metro_areas <- metro_areas %>%
st_transform(st_crs(pa_counties))
#check out the magic of the geometry column.
st_geometry(pa_counties)
# Basic inspection
glimpse(pa_counties)
# Check coordinate reference system
st_crs(pa_counties)
# Get just the geometry
county_shapes <- st_geometry(pa_counties)
# Get just the data (no geometry)
county_data <- st_drop_geometry(pa_counties)
# Simple plot
plot(pa_counties)
# Just the geometry
plot(st_geometry(pa_counties))
# With ggplot2
ggplot(pa_counties) +
geom_sf() +
theme_void()
##Spatial Subsetting
# Get counties that intersect with a specific region
allegheny <- pa_counties %>%
filter(COUNTY_NAM == "ALLEGHENY")
# Find counties that touch Allegheny
neighbors <- pa_counties %>%
st_filter(allegheny, .predicate = st_touches)
# Map them
ggplot(neighbors) +
geom_sf() +
theme_void()
# Counties within 50km of Allegheny centroid
allegheny_center <- st_centroid(allegheny)
nearby <- pa_counties %>%
st_filter(st_buffer(allegheny_center, dist = 50000))
# Map them
ggplot(nearby) +
geom_sf() +
theme_void()
# Find census tracts within Allegheny County
tracts_in_allegheny <- census_tracts %>%
st_filter(allegheny, .predicate = st_within)
# With ggplot2
ggplot(tracts_in_allegheny) +
geom_sf() +
theme_void()
# Find counties that core based statistical areas (any overlap)
ggplot(metro_areas) +
geom_sf() +
theme_void()
metro_tracts<- census_tracts %>%
st_filter(metro_areas, .predicate = st_intersects)
ggplot(metro_tracts) +
geom_sf() +
theme_void()
##spatial joins
# Get census tract data
pa_tracts <- tracts(state = "PA", county = "Allegheny", cb = TRUE)
# Join tract data to county boundaries
# Each tract gets county attributes
tracts_with_counties <- census_tracts %>%
st_join(pa_counties)
# Aggregate tracts up to counties
# Summarize tract data by county
county_summaries <- tracts_with_counties %>%
st_drop_geometry() %>%
group_by(COUNTY_NAM) %>%
summarize(
n_tracts = n(),
avg_area = mean(AREA_SQ_MI)
)
county_summaries
##Distances
# Distance between county centroids
county_centers <- st_centroid(pa_counties)
ggplot(county_centers)+
geom_sf()+
theme_void()
distance_matrix <- st_distance(county_centers)
head(distance_matrix)
# Calculate county areas
pa_counties <- pa_counties %>%
mutate(
area_sqkm = as.numeric(st_area(.)) / 1000000  # Convert to sq km
)
# Population density (need to join census data)
pa_counties <- pa_counties %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(
pop_density = population / area_sqkm
)
# Distance from each county to a specific point
philadelphia <- pa_counties %>%
filter(NAME == "Philadelphia")
View(pa_counties)
# 10km buffer around all hospitals
hospitals_projected <- hospitals %>%
st_transform(crs = 3365)
st_crs(hospitals_projected)
hospital_buffers <- hospitals_projected %>%
st_buffer(dist = 32808.4)  # 10,000 meters = 32808.4 feet
ggplot(hospital_buffers)+
geom_sf()+
theme_void()
# Different buffer sizes by hospital type (this is hypothetical, we don't have that column!)
hospital_buffers <- hospitals %>%
mutate(
buffer_size = case_when(
type == "Major Medical Center" ~ 15000,
type == "Community Hospital" ~ 10000,
type == "Clinic" ~ 5000
)
) %>%
st_buffer(dist = .$buffer_size)
# 10km buffer around all hospitals
hospitals_projected <- hospitals %>%
st_transform(crs = 3365)
st_crs(hospitals_projected)
hospital_buffers <- hospitals_projected %>%
st_buffer(dist = 32808.4)  # 10,000 meters = 32808.4 feet
ggplot(hospital_buffers)+
geom_sf()+
theme_void()
# Different buffer sizes by hospital type (this is hypothetical, we don't have that column!)
hospital_buffers <- hospitals %>%
mutate(
buffer_size = case_when(
type == "Major Medical Center" ~ 15000,
type == "Community Hospital" ~ 10000,
type == "Clinic" ~ 5000
)
) %>%
st_buffer(dist = .$buffer_size)
# Join demographic data to tract boundaries
tracts <- tracts %>%
left_join(pa_tracts_data, by = "GEOID")
library(tydyverse)
library(tydyverse)
library(tidyverse)
# Join demographic data to tract boundaries
tracts <- tracts %>%
left_join(pa_tracts_data, by = "GEOID")
# Join demographic data to tract boundaries
tracts <- census_tracts %>%
left_join(pa_tracts_data, by = "GEOID")
# Load libraries
library(sf)
library(tidyverse)
library(ggplot2)
library(tigris)
library(tidycensus)
library(patchwork)
library(scales)
# Set up Census API key
census_api_key("b236a5b2547ce79c3e203c3e1366ed7fa7b3d463", install = FALSE)
Sys.getenv("CENSUS_API_KEY")
# --- Load spatial data ---
# 1. Read local shapefile
pa_counties <- st_read("Pennsylvania_County_Boundaries.shp")
# 2. Read local GeoJSON
districts <- st_read("districts.geojson")
hospitals <- st_read("hospitals.geojson") %>%
st_transform(st_crs(pa_counties))
# 3. Read from URL
state_bounds <- st_read(
"https://gis.penndot.pa.gov/gis/rest/services/opendata/stateboundary/MapServer/0/query?outFields=*&where=1%3D1&f=geojson"
)
# Census tracts (tigris)
census_tracts <- tracts(state = "PA", cb = TRUE) %>%
st_transform(st_crs(pa_counties))
# Core based statistical areas
metro_areas <- core_based_statistical_areas(cb = TRUE) %>%
st_transform(st_crs(pa_counties))
# --- Inspections / plots ---
st_geometry(pa_counties)
glimpse(pa_counties)
st_crs(pa_counties)
plot(pa_counties)
ggplot(pa_counties) + geom_sf() + theme_void()
# --- Spatial Subsetting ---
allegheny <- pa_counties %>%
filter(COUNTY_NAM == "ALLEGHENY")
neighbors <- pa_counties %>%
st_filter(allegheny, .predicate = st_touches)
ggplot(neighbors) + geom_sf() + theme_void()
# --- Distances ---
county_centers <- st_centroid(pa_counties)
distance_matrix <- st_distance(county_centers)
head(distance_matrix)
# --- Add Census population data for density ---
county_population_data <- get_acs(
geography = "county",
variables = "B01003_001", # total population
state = "PA",
year = 2022,
output = "wide"
) %>%
select(GEOID, population = B01003_001E)
pa_counties <- pa_counties %>%
mutate(area_sqkm = as.numeric(st_area(.)) / 1e6) %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(pop_density = population / area_sqkm)
View(pa_counties)
pa_counties <- pa_counties %>%
mutate(area_sqkm = as.numeric(st_area(.)) / 1e6) %>%
left_join(county_population_data, by = "OBJECTID") %>%
mutate(pop_density = population / area_sqkm)
View(county_population_data)
View(pa_counties)
pa_counties <- pa_counties %>%
rename(GEOID = OBJECTID)
pa_counties <- pa_counties %>%
mutate(area_sqkm = as.numeric(st_area(.)) / 1e6) %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(pop_density = population / area_sqkm)
pa_counties <- pa_counties %>%
mutate(GEOID = as.character(GEOID)) %>%   # make GEOID character
mutate(area_sqkm = as.numeric(st_area(.)) / 1e6) %>%
left_join(county_population_data, by = "GEOID") %>%
mutate(pop_density = population / area_sqkm)
# --- Hospital buffers ---
hospitals_projected <- hospitals %>%
st_transform(crs = 3365)
hospital_buffers <- hospitals_projected %>%
st_buffer(dist = 10000)  # 10 km in meters
ggplot(hospital_buffers) + geom_sf() + theme_void()
# --- Join ACS tract data ---
pa_tracts_data <- get_acs(
geography = "tract",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001",
over_65 = "B01001_020"
),
state = "PA",
year = 2022,
output = "wide"
)
tracts <- census_tracts %>%
left_join(pa_tracts_data, by = "GEOID")
# Identify vulnerable populations
low_income_tracts <- tracts %>%
filter(median_incomeE < 40000) %>%
st_transform(crs = 3365)
# Overlay with hospitals
healthcare_accessible <- low_income_tracts %>%
st_intersection(st_union(hospital_buffers))
# Access summary
access_summary <- low_income_tracts %>%
mutate(has_access = st_intersects(., st_union(hospital_buffers), sparse = FALSE)) %>%
st_drop_geometry() %>%
summarize(
total_tracts = n(),
tracts_with_access = sum(has_access),
pct_with_access = (tracts_with_access / total_tracts) * 100
)
print(access_summary)
low_income_access_map <- low_income_tracts %>%
mutate(has_access = st_intersects(., st_union(hospital_buffers), sparse = FALSE))
ggplot() +
geom_sf(data = low_income_access_map, aes(fill = has_access), color = NA) +
geom_sf(data = hospitals, color = "red", size = 2) +
geom_sf(data = hospital_buffers, fill = NA, color = "blue", linetype = "dashed") +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "orange"),
labels = c("No Access", "Has Access")) +
labs(
title = "Healthcare Access in Low-Income Census Tracts",
fill = "Access"
) +
theme_void()
low_income_access_map <- low_income_tracts %>%
mutate(has_access = st_intersects(., st_union(hospital_buffers), sparse = FALSE))
ggplot() +
geom_sf(data = low_income_access_map, aes(fill = has_access), color = "white", size = 0.2) +
geom_sf(data = hospitals, color = "red", size = 1, alpha = 0.7) +
scale_fill_manual(
values = c("TRUE" = "darkgreen", "FALSE" = "orange"),
labels = c("No Access", "Has Access")
) +
labs(
title = "Healthcare Access in Low-Income Census Tracts",
fill = "Access"
) +
theme_void()
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
# Set Census API key
census_api_key("b236a5b2547ce79c3e203c3e1366ed7fa7b3d463", install = FALSE)
Sys.getenv("CENSUS_API_KEY")
# Load the data (same as lecture)
pa_counties <- st_read(here("data/Pennsylvania_County_Boundaries.shp"))
districts <- st_read(here("data/districts.geojson"))
hospitals <- st_read(here("data/hospitals.geojson"))
census_tracts <- tracts(state = "PA", cb = TRUE)
metro_areas <- core_based_statistical_areas(cb = TRUE)
# Standardize CRS
hospitals <- st_transform(hospitals, st_crs(pa_counties))
census_tracts <- st_transform(census_tracts, st_crs(pa_counties))
metro_areas <- st_transform(metro_areas, st_crs(pa_counties))
districts <- st_transform(districts, st_crs(census_tracts))
# Step 1: Look at available county names
unique(pa_counties$COUNTY_NAM)
# Step 2: Pick one county (change this to your choice!)
my_county <- pa_counties %>%
filter(COUNTY_NAM == "CENTRE")  # Change "CENTRE" to your county
# Step 3: Find neighbors using st_touches
my_neighbors <- pa_counties %>%
st_filter(my_county, .predicate = st_touches)
# Step 4: How many neighbors does your county have?
cat("Number of neighboring counties:", nrow(my_neighbors), "\n")
print("Neighbor names:")
print(my_neighbors$COUNTY_NAM)
# Create the map
ggplot() +
geom_sf(data = pa_counties, fill = "lightgray", color = "white") +
geom_sf(data = my_neighbors, fill = "lightblue", alpha = 0.7) +
geom_sf(data = my_county, fill = "darkblue") +
labs(
title = paste("Neighbors of", my_county$COUNTY_NAM[1], "County"),
subtitle = paste(nrow(my_neighbors), "neighboring counties")
) +
theme_void()
# Use st_intersects
intersecting_counties <- pa_counties %>%
st_filter(my_county, .predicate = st_intersects)
cat("With st_touches:", nrow(my_neighbors), "counties\n")
cat("With st_intersects:", nrow(intersecting_counties), "counties\n")
cat("Difference:", nrow(intersecting_counties) - nrow(my_neighbors), "\n")
# Step 1: Filter hospitals in your county
# First do a spatial join to assign counties to hospitals
hospitals_with_county <- hospitals %>%
st_join(pa_counties %>% select(COUNTY_NAM))
# Filter for your county's hospitals
my_county_hospitals <- hospitals_with_county %>%
filter(COUNTY_NAM == "CENTRE")  # Change to match your county
cat("Number of hospitals in county:", nrow(my_county_hospitals), "\n")
# Step 2: Project to accurate CRS for buffering
my_county_hospitals_proj <- my_county_hospitals %>%
st_transform(3365)  # Pennsylvania State Plane South
# Step 3: Create 15-mile buffers (24140 meters = 15 miles)
hospital_service_areas <- my_county_hospitals_proj %>%
st_buffer(dist = 79200)  # 15 miles in feet for PA State Plane
# Step 4: Transform back for mapping
hospital_service_areas <- st_transform(hospital_service_areas, st_crs(pa_counties))
ggplot() +
geom_sf(data = my_county, fill = "white", color = "gray") +
geom_sf(data = hospital_service_areas, fill = "lightblue", alpha = 0.4) +
geom_sf(data = my_county_hospitals, color = "red", size = 2) +
labs(
title = paste("Hospital Service Areas in", my_county$COUNTY_NAM[1], "County"),
subtitle = "Red points = Hospitals, Blue areas = 15-mile service zones"
) +
theme_void()
# Union all service areas into one polygon
combined_service_area <- hospital_service_areas %>%
st_union()
# Calculate areas (need to be in projected CRS)
my_county_proj <- st_transform(my_county, 3365)
combined_service_proj <- st_transform(combined_service_area, 3365)
# Find intersection
coverage_area <- st_intersection(my_county_proj, combined_service_proj)
# Calculate percentages
county_area <- as.numeric(st_area(my_county_proj))
covered_area <- as.numeric(st_area(coverage_area))
coverage_pct <- (covered_area / county_area) * 100
cat("County area:", round(county_area / 1e6, 1), "sq km\n")
cat("Covered area:", round(covered_area / 1e6, 1), "sq km\n")
cat("Coverage:", round(coverage_pct, 1), "%\n")
